@model List<SMS.Models.Mark>

@{
    ViewBag.Title = "Grades Summary";
    Layout = "~/Views/Teachers/_Teacher_Layout.cshtml";
}

<link href="~/Content/plugins/datatables/dataTables.bootstrap4.min.css" rel="stylesheet" />

@{ var subjects = (List<SMS.Models.Subject>)ViewBag.Subjects;
    string[] subjectList = subjects.Select(s => s.Subject1).ToArray();

    List<SMS.Models.Student> Students = Model.Select(m => m.Student).Distinct().ToList();
    List<SMS.Models.StudentRank> OverallRank = new List<SMS.Models.StudentRank>();
    List<SMS.Models.StudentRank> SubjectRank = new List<SMS.Models.StudentRank>();
    List<SMS.Models.StudentRank> MonthRank = new List<SMS.Models.StudentRank>();

    double[] monthlyAverage = new double[10];
    int[][] monthlyGrade = new int[4][];
    int[][] subjectGrade = new int[4][];
    double[] subjectAverage = new double[subjects.Count()];


    int count = 0;

    monthlyGrade[0] = new int[10];
    monthlyGrade[1] = new int[10];
    monthlyGrade[2] = new int[10];
    monthlyGrade[3] = new int[10];
    subjectGrade[0] = new int[subjectList.Count()];
    subjectGrade[1] = new int[subjectList.Count()];
    subjectGrade[2] = new int[subjectList.Count()];
    subjectGrade[3] = new int[subjectList.Count()];





    foreach (var month in (List<string>)ViewBag.Order)
    {
        var grades = Model.Where(g => g.Month.Equals(month));
        monthlyGrade[0][count] = grades.Where(g => g.Score >= 90).Count();
        monthlyGrade[1][count] = grades.Where(g => g.Score >= 80 && g.Score < 90).Count();
        monthlyGrade[2][count] = grades.Where(g => g.Score >= 70 && g.Score < 80).Count();
        monthlyGrade[3][count] = grades.Where(g => g.Score < 70).Count();
        var total = grades.Count();
        double sum = 0;

        foreach (var grade in grades)
        {
            sum += grade.Score;
        }

        monthlyAverage[count] = Math.Round(sum / total, 2);
        count++;

    }

    count = 0;

}

<div class="text-center"><h5>Class' Average Performance</h5> </div>

<div class="table-responsive bg-white">


    <table id="students" class="table table-sm table-bordered table-striped display">
        <thead>

            <tr>
                <th>
                    Subject
                </th>
                @foreach (var month in (List<string>)ViewBag.Months)
                {
                    <th>
                        @month
                    </th>
                }

            </tr>
        </thead>
        <tbody>
            @foreach (var item in subjects)
            {



                var subjectGrades = Model.Where(g => g.SubjectID.Equals(item.SubjectID));
                var subjectTotal = subjectGrades.Count();
                double subjectSum = 0;

                subjectGrade[0][count] = subjectGrades.Where(g => g.Score >= 90).Count();
                subjectGrade[1][count] = subjectGrades.Where(g => g.Score >= 80 && g.Score < 90).Count();
                subjectGrade[2][count] = subjectGrades.Where(g => g.Score >= 70 && g.Score < 80).Count();
                subjectGrade[3][count] = subjectGrades.Where(g => g.Score < 70).Count();

                foreach (var grade in subjectGrades)
                {
                    subjectSum += grade.Score;
                }

                subjectAverage[count] = Math.Round(subjectSum / subjectTotal, 2);
                count++;

                <tr>
                    <td>
                        @item.Subject1
                    </td>


                    @foreach (var month in (List<string>)ViewBag.Order)
                    {
                        var grade = Model.Where(m => m.SubjectID.Equals(item.SubjectID) && m.Month.Equals(month));
                        double gradeSum = 0;

                        foreach (var g in grade)
                        {
                            gradeSum += g.Score;
                        }



                        if (grade != null)
                        {
                            double gradeAverage = Math.Round(gradeSum / grade.Count(), 2);

                            if (!Double.IsNaN(gradeAverage))
                            {
                                <td>@gradeAverage</td>
                            }
                            else
                            {
                                <td>N/A</td>
                            }

                        }
                        else
                        {
                            <td>N/A</td>
                        }

                    }



                </tr>
            }

            <tr>
                <td>
                    <b>Averages</b>
                </td>
                @foreach (var item in monthlyAverage)
                {
                    <td>
                        @if (Double.IsNaN(item))
                        {
                            <b>N/A</b>
                        }

                        else
                        {
                            <b> @item</b>
                        }

                    </td>

                }

            </tr>

        </tbody>
    </table>





</div>


<div class="row mt-5">

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-5 col-xl-6">
        <div class="card mb-3">
            <div class="card-header">
                <i class="fa fa-bar-chart"></i> Monthly Score Performance Over Academic Year
            </div>

            <div class="card-body">
                <canvas id="month"></canvas>
            </div>
            <div class="card-footer small text-muted">Monthly performance</div>
        </div><!-- end card-->
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-5 col-xl-6">
        <div class="card mb-3">
            <div class="card-header">
                <i class="fa fa-bar-chart"></i> Score Performance Per Subject
            </div>

            <div class="card-body">
                <canvas id="subject"></canvas>
            </div>
            <div class="card-footer small text-muted">Subject performance</div>
        </div><!-- end card-->
    </div>
</div>
<div class="row">

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-5 col-xl-6">
        <div class="card mb-3">
            <div class="card-header">
                <i class="fa fa-bar-chart"></i> Monthly Grade Performance Over Academic Year
            </div>

            <div class="card-body">
                <canvas id="monthGrade"></canvas>
            </div>
            <div class="card-footer small text-muted">Monthly performance</div>
        </div><!-- end card-->
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-5 col-xl-6">
        <div class="card mb-3">
            <div class="card-header">
                <i class="fa fa-bar-chart"></i> Grade Performance Per Subject
            </div>

            <div class="card-body">
                <canvas id="subjectGrade"></canvas>
            </div>
            <div class="card-footer small text-muted">Subject performance</div>
        </div><!-- end card-->
    </div>
</div>

<div class="row">
    @foreach (var stud in Students)
    {
        var studentMark = Model.Where(m => m.StudentID.Equals(stud.StudentID));
        var monthMark = studentMark.Where(m => m.Month.Equals((DateTime.Today.Month - 1).ToString()));
        var studentSum = studentMark.Select(m => m.Score).ToList().Sum();
        var monthSum = monthMark.Select(m => m.Score).ToList().Sum();
        var studentAverage = studentSum / studentMark.Count();
        var monthAverage = monthSum / monthMark.Count();

        OverallRank.Add(new SMS.Models.StudentRank(stud.StudentID, stud.FirstName, stud.LastName, studentAverage));
        MonthRank.Add(new SMS.Models.StudentRank(stud.StudentID, stud.FirstName, stud.LastName, monthAverage));

    }

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6 col-xl-6">
        <div class="card mb-3">
            <div class="card-header">
                <h3><i class="fa fa-table"></i> Class Ranking for Academic Year</h3>
                Shows student's overall ranking in the class based on all grades, thus far, from this academic year.
            </div>

            <div class="card-body">

                <div class="table-responsive">
                    <table class="table table-bordered table-hover display rank">
                        <thead>
                            <tr>
                                <th>Place</th>
                                <th>Student ID</th>
                                <th>First ame</th>
                                <th>Last name</th>
                                <th>Average</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ var orderedS = OverallRank.OrderByDescending(a => a.Average).ToList();}
                            @for (int i = 0; i < OverallRank.Count; i++)
                            {
                                var x = i + 1;
                                var avg = Math.Round(orderedS[i].Average, 2);
                                <tr>
                                    <td>@x</td>
                                    <td>@orderedS[i].ID</td>
                                    <td>@orderedS[i].FirstName</td>
                                    <td>@orderedS[i].LastName</td>
                                    <td>@avg</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>


    </div>

    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6 col-xl-6">
        <div class="card mb-3">
            <div class="card-header">
                <h3><i class="fa fa-table"></i> Class Ranking for Last Month</h3>
                Shows student's overall ranking in the class based on grades from last month.
            </div>

            <div class="card-body">

                <div class="table-responsive">
                    <table class="table table-bordered table-hover display rank">
                        <thead>
                            <tr>
                                <th>Place</th>
                                <th>Student ID</th>
                                <th>First ame</th>
                                <th>Last name</th>
                                <th>Average</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ var orderedM = MonthRank.OrderByDescending(a => a.Average).ToList();}
                            @for (int i = 0; i < OverallRank.Count; i++)
                            {
                                var x = i + 1;
                                var avg = Math.Round(orderedM[i].Average, 2);
                                <tr>
                                    <td>@x</td>
                                    <td>@orderedM[i].ID</td>
                                    <td>@orderedM[i].FirstName</td>
                                    <td>@orderedM[i].LastName</td>
                                    <td>@avg</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>


    </div>


</div>
<div class="mt-5">
    <a href="/Teachers/Students" class="btn btn-primary ">Back to list</a>
</div>

<script src="~/Content/plugins/chart.js/chart.min.js"></script>
<script src="~/Content/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Content/plugins/datatables/dataTables.bootstrap4.min.js"></script>
<script>

    $(document).ready(function () {
        $('.rank').DataTable({

            "scrollY": "350px",
            "paging": false
        });
    });

    var monthChart = document.getElementById("month").getContext('2d');
    var month = new Chart(monthChart, {

        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Encode(@ViewBag.Months.ToArray())) ,
            datasets: [{
                type: 'bar',
                label: 'Bar Average',
                data:  @Html.Raw(Json.Encode(@monthlyAverage)) ,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                ],
                borderWidth: 1
            },
                {
                    type: 'line',
                    label: 'Line Average',
                    borderColor: '#484c4f',
                    borderWidth: '3',
                    fill: false,
                    data: @Html.Raw(Json.Encode(@monthlyAverage)),

                }

            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }

    });

    var monthGradeChart = document.getElementById("monthGrade").getContext('2d');
    var monthGrade = new Chart(monthGradeChart, {

        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Encode(@ViewBag.Months.ToArray())) ,
            datasets: [{
                type: 'bar',
                label: "A's",
                data:  @Html.Raw(Json.Encode(@monthlyGrade[0])) ,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255,99,132,1)',
                borderWidth: 1
            },
            {
                type: 'bar',
                label: "B's",
                data:  @Html.Raw(Json.Encode(@monthlyGrade[1])) ,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
                },
                {
                type: 'bar',
                label: "C's",
                data:  @Html.Raw(Json.Encode(@monthlyGrade[2])) ,
                backgroundColor: 'rgba(255, 206, 86, 0.2)',
                borderColor: 'rgba(255, 206, 86, 1)',
                borderWidth: 1
            },
            {
                type: 'bar',
                label: "Fails",
                data:  @Html.Raw(Json.Encode(@monthlyGrade[3])) ,
                backgroundColor: 'rgba(0, 0, 0, 0.2)',
                borderColor: 'rgba(0, 0, 0, 1)',
                borderWidth: 1
            }

            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }

    });

      var subjectGradeChart = document.getElementById("subjectGrade").getContext('2d');
    var subjectGrade = new Chart(subjectGradeChart, {

        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Encode(subjectList)) ,
            datasets: [{
                type: 'bar',
                label: "A's",
                data:  @Html.Raw(Json.Encode(@subjectGrade[0])) ,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255,99,132,1)',
                borderWidth: 1
            },
            {
                type: 'bar',
                label: "B's",
                data:  @Html.Raw(Json.Encode(@subjectGrade[1])) ,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
                },
                {
                type: 'bar',
                label: "C's",
                data:  @Html.Raw(Json.Encode(@subjectGrade[2])) ,
                backgroundColor: 'rgba(255, 206, 86, 0.2)',
                borderColor: 'rgba(255, 206, 86, 1)',
                borderWidth: 1
            },
            {
                type: 'bar',
                label: "Fails",
                data:  @Html.Raw(Json.Encode(@subjectGrade[3])) ,
                backgroundColor: 'rgba(0, 0, 0, 0.2)',
                borderColor: 'rgba(0, 0, 0, 1)',
                borderWidth: 1
            }

            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }

    });

    var subjectChart = document.getElementById("subject").getContext('2d');
    var subject = new Chart(subjectChart, {

        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Encode(subjectList)) ,
            datasets: [{
                label: 'Subject Average',
                data:  @Html.Raw(Json.Encode(subjectAverage)) ,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }

    });

</script>




